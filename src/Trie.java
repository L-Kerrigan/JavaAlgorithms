import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Trie{

    // Alphabet size (# of symbols) we pick 26 for English alphabet
    static final int ALPHABET_SIZE = 26;

    // class for Trie node
    static class TrieNode {
        TrieNode[] children = new TrieNode[ALPHABET_SIZE];
        // isEndOfWord is true if the node represents end of a word i.e. leaf node
        boolean isEndOfWord;

        TrieNode(){
            isEndOfWord = false;

            for (int i = 0; i < ALPHABET_SIZE; i++)
                children[i] = null;
        }
    }

    static TrieNode root;
    //If not key present, inserts into trie. If the key is prefix of Trie node,Â marks leaf node
    static void insert(String key){
        TrieNode curr = root;
        int index;
        for(int i = 0; i < key.length(); i++) {
            //Uses ASCII chars to find location in the array corresponding to the letter's position in the alphabet
            index = key.charAt(i) - 'a';
            if (curr.children[index] == null) {
                //If there's a letter to be entered, create a new TrieNode at the
                //index corresponding to the letter's place in the alphabet
                curr.children[index] = new TrieNode();
            }
            curr = curr.children[index];
        }
        //If there are no letters left in the string, indicate that this is the end of the word
        curr.isEndOfWord = true;
    }

    // Returns true if key presents in trie, else false
    static boolean search(String key) {
        int index;
        TrieNode curr = root;

        for (int i = 0; i < key.length(); i++){
            //Uses ASCII chars to find location in the array corresponding to the letter's position in the alphabet
            index = key.charAt(i) - 'a';

            //If the value at the given index is empty, then this is the end of the word of the trie
            //even though there's letters still in our searched word, so the word doesn't exist
            if(curr.children[index] == null){
                return false;
            }
            curr = curr.children[index];
        }
        //If the current node isn't empty & is at the end of a word, the word exists, so return true
        //Else it doesn't exist, so return false
        return (curr != null && curr.isEndOfWord);
    }


    public static void main(String[] args) throws IOException {
        long startTime;
        long estimatedTime;

        String[] keys = {"cow", "goat", "pig", "elk"};
        String[] output = {"Not present in trie", "Present in trie"};

        //Running a few tests for different file sizes and numbers of keys
        //All words in the files and most of the keys were generated by an online word
        //generator found here: https://wordcounter.net/random-word-generator
        root = new TrieNode();
        BufferedReader br = new BufferedReader(new FileReader("src\\10words.txt"));
        String currentLine;
        //Inserting all words from the text file into the Trie
        while((currentLine = br.readLine()) != null){
            insert(currentLine);
        }
        System.out.println("Trie 1: 10 words, " + keys.length + " keys");
        startTime = System.nanoTime();
        //Searches to see if each key is present in tree
        for (String key : keys) {
            if (search(key)) {
                System.out.println(key + " = " + output[1]);
            } else {
                System.out.println(key + " = " + output[0]);
            }
        }
        estimatedTime = System.nanoTime() - startTime;
        System.out.println("Time taken to complete all searches: " + estimatedTime + " nanoseconds");
        System.out.println();


        root = new TrieNode();
        keys = new String[]{"wrench", "period", "whatever", "computer", "france", "bag", "green", "blue", "yellow", "it", "cow", "goat", "pig", "elk", "muddled","actor","connote","ear","friendly","rich","descriptive","wealthy","classify","cloudy","impulse","glorious","touch","occupy","dirt","renounce","return","hope","exchange","wave","consider","goose","confused"};
        br = new BufferedReader(new FileReader("src\\50words.txt"));
        //Inserting all words from the text file into the Trie
        while((currentLine = br.readLine()) != null){
            insert(currentLine);
        }
        System.out.println("Trie 2: 50 words, " + keys.length + " keys");
        startTime = System.nanoTime();
        //Searches to see if each key is present in tree
        for (String key : keys) {
            if (search(key)) {
                System.out.println(key + " = " + output[1]);
            } else {
                System.out.println(key + " = " + output[0]);
            }
        }
        estimatedTime = System.nanoTime() - startTime;
        System.out.println("Time taken to complete all searches: " + estimatedTime + " nanoseconds");
        System.out.println();


        root = new TrieNode();
        keys = new String[]{"wrench", "period", "whatever", "computer", "france", "bag", "green", "blue", "yellow", "it", "cow", "goat", "pig", "elk","muddled","actor","connote","ear","friendly","rich","descriptive","wealthy","classify","cloudy","impulse","glorious","touch","occupy","dirt","renounce","return","hope","exchange","wave","consider","goose","confused","grass","goldfish","garrulous","skin","wholesale","beautify","uncle","screw","metal","sick","brass","warn","fetch","sad","appear","scent","operation","structure","ossified","foamy","record","wrench","temporary","happen","glass","authority","modern","divergent","sink","course","elfin","climb","wave","murmur","military","precious","note","irritating","standing","cannon","bring","mature","fly","mean","tightfisted","spoon","auspicious","stranger","ambitious","purpose","bite","lie","implicate"};
        br = new BufferedReader(new FileReader("src\\100words.txt"));
        //Inserting all words from the text file into the Trie
        while((currentLine = br.readLine()) != null){
            insert(currentLine);
        }
        System.out.println("Trie 3: 100 words, " + keys.length + " keys");
        startTime = System.nanoTime();
        //Searches to see if each key is present in tree
        for (String key : keys) {
            if (search(key)) {
                System.out.println(key + " = " + output[1]);
            } else {
                System.out.println(key + " = " + output[0]);
            }
        }
        estimatedTime = System.nanoTime() - startTime;
        System.out.println("Time taken to complete all searches: " + estimatedTime + " nanoseconds");
        System.out.println();


        root = new TrieNode();
        keys = new String[]{"wrench", "period", "whatever", "computer", "france", "bag", "green", "blue", "yellow", "it", "cow", "goat", "pig", "elk","muddled","actor","connote","ear","friendly","rich","descriptive","wealthy","classify","cloudy","impulse","glorious","touch","occupy","dirt","renounce","return","hope","exchange","wave","consider","goose","confused","grass","goldfish","garrulous","skin","wholesale","beautify","uncle","screw","metal","sick","brass","warn","fetch","sad","appear","scent","operation","structure","ossified","foamy","record","wrench","temporary","happen","glass","authority","modern","divergent","sink","course","elfin","climb","wave","murmur","military","precious","note","irritating","standing","cannon","bring","mature","fly","mean","tightfisted","spoon","auspicious","stranger","ambitious","purpose","bite","ignore","filthy","cheer","war","stitch","silk","space","lie","implicate"};
        br = new BufferedReader(new FileReader("src\\1000words.txt"));
        //Inserting all words from the text file into the Trie
        while((currentLine = br.readLine()) != null){
            insert(currentLine);
        }
        System.out.println("Trie 4: 1000 words, " + keys.length + " keys");
        startTime = System.nanoTime();
        //Searches to see if each key is present in tree
        for (String key : keys) {
            if (search(key)) {
                System.out.println(key + " = " + output[1]);
            } else {
                System.out.println(key + " = " + output[0]);
            }
        }
        estimatedTime = System.nanoTime() - startTime;
        System.out.println("Time taken to complete all searches: " + estimatedTime + " nanoseconds");
        System.out.println();


        //Test for ordinary string input instead of a file
        root = new TrieNode();
        keys = new String[]{"bank", "book", "bar", "bring", "film", "filter", "simple", "silt", "silver"};

        //Inserting all keys into the Trie
        for (String key : keys) {
            insert(key);
        }
        System.out.println("Trie 5: " + keys.length + " words, " + (keys.length+1) + " keys");
        startTime = System.nanoTime();
        //Searches to see if each key is present in tree
        for (String key : keys) {
            if (search(key)) {
                System.out.println(key + " = " + output[1]);
            } else {
                System.out.println(key + " = " + output[0]);
            }
        }

        //Checking a word that is not one of the keys/isn't present in the trie
        if (search("goodbye")) {
            System.out.println("goodbye = " + output[1]);
        } else {
            System.out.println("goodbye = " + output[0]);
        }
        estimatedTime = System.nanoTime() - startTime;
        System.out.println("Time taken to complete all searches: " + estimatedTime + " nanoseconds");
    }
}